{"version":3,"sources":["Publisher.js","Subscriber.js","MQTTApp.js","index.js"],"names":["Publisher","props","url","mqttOptions","useState","client","setClient","connectStatus","setConnectStatus","tempPayload","setTempPayload","lightPayload","setLightPayload","temperatureTopic","lightTopic","will","topic","payload","qos","retain","useEffect","console","log","on","startSensors","err","error","end","getRandomIntInclusive","min","max","Math","ceil","floor","random","plublishLight","setTimeout","plublishTemp","temp","toString","publish","message","light","className","title","onClick","mo","clientId","substr","mqtt","connect","Subscriber","subscribe","data","split","keepalive","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","rejectUnauthorized","MQTTApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b1cd79e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport mqtt from \"mqtt\";\n \n// Component\nimport { Card, Button, Row } from \"antd\";\n \n\n \nconst Publisher = (props) => {\n  const { url, mqttOptions } = props;\n \n  // State\n  const [client, setClient] = useState(null);\n  const [connectStatus, setConnectStatus] = useState(\"Disconnected\");\n  const [tempPayload, setTempPayload] = useState(\"\");\n  const [lightPayload, setLightPayload] = useState(\"\");\n\n  // Topic\nvar temperatureTopic = \"home/hall/temp\";\nvar lightTopic = \"home/hall/light\";\n\nvar temperatureTopic = props.temperatureTopic;\nvar lightTopic = props.lightTopic;\n \n// Last will and testament\nvar will = {\n  topic: temperatureTopic,\n  payload: \"Something went wrong with Hall\",\n  qos: 2,\n  retain: false,\n};\n \n  // On connect to broker\n  useEffect(() => {\n    if (client) {\n      console.log(client);\n \n      client.on(\"connect\", () => {\n        startSensors();\n        setConnectStatus(\"Connected\");\n      });\n \n      client.on(\"error\", (err) => {\n        console.error(\"Connection error: \", err);\n        client.end(() => {\n          setConnectStatus(\"Disconnected\");\n        });\n      });\n \n      client.on(\"reconnect\", () => {\n        setConnectStatus(\"Reconnecting\");\n      });\n    }\n  }, [client]);\n \n  const connectToBroker = () => {\n    console.log(\"connectToBroker\");\n    const mo = {\n      ...mqttOptions,\n      clientId: `mqttjs_ + ${Math.random().toString(16).substr(2, 8)}`,\n      will,\n    };\n    setClient(mqtt.connect(url, mo));\n  };\n \n  const disconnectToBroker = () => {\n    console.log(\"disconnectToBroker\");\n    if (client) {\n      client.end(() => {\n        setConnectStatus(\"Disconnected\");\n      });\n    }\n  };\n \n  const getRandomIntInclusive = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n \n  const startSensors = () => {\n    plublishLight();\n    setTimeout(plublishTemp, 2000);\n  };\n \n  const plublishTemp = () => {\n    if (client) {\n      const temp = getRandomIntInclusive(20, 45).toString();\n      client.publish(temperatureTopic, temp, { qos: 2 }, (error) => {\n        const data = { lightTopic, message: temp };\n        setTempPayload(data);\n \n        if (error) {\n          console.log(\"Temp Publish error: \", error);\n        }\n      });\n \n      setTimeout(plublishTemp, 4000);\n    }\n  };\n \n  const plublishLight = () => {\n    if (client) {\n      const light = getRandomIntInclusive(100, 200).toString();\n      client.publish(lightTopic, light, { qos: 2 }, (error) => {\n        const data = { lightTopic, message: light };\n        setLightPayload(data);\n \n        if (error) {\n          console.log(\"Publish error: \", error);\n        }\n      });\n \n      setTimeout(plublishLight, 4000);\n    }\n  };\n \n  return (\n    <Card className=\"equal-width\" title ={props.title}>\n        <div>Topic:\n        {props.temperatureTopic},\n        <div>{props.lightTopic}</div>\n        </div>\n        <div>Temp: {tempPayload?.message || 0}</div>\n        <div>Light: {lightPayload?.message || 0}</div>\n      \n      <div>Status: {connectStatus}</div>\n      {connectStatus === \"Connected\" ? (\n        <Button onClick={disconnectToBroker}>Disconnect</Button>\n      ) : (\n        <Button onClick={connectToBroker}>Connect</Button>\n      )}\n    </Card>\n  );\n};\n \nexport default Publisher;\n","import React, { useState, useEffect } from \"react\";\nimport mqtt from \"mqtt\";\n \n// Component\nimport { Card, Button, Row} from \"antd\";\n \n// Topic\nvar temperatureTopic = \"home/hall/temp\";\nvar lightTopic = \"home/hall/light\";\n \n\nconst Subscriber = (props) => {\n  const { url, mqttOptions } = props;\n \n  // State\n  const [client, setClient] = useState(null);\n  const [connectStatus, setConnectStatus] = useState(\"Connect\");\n  const [tempPayload, setTempPayload] = useState(\"\");\n  const [lightPayload, setLightPayload] = useState(\"\");\n  //const topic = \"home/hall/temp\";\n \n  // On connect to broker\n  const will = {\n    topic: temperatureTopic,\n    payload: `Something went wrong with ${props.title}`,\n    qos: 2,\n    retain: false,\n  };\n   \n  useEffect(() => {\n    if (client) {\n      console.log(client);\n \n      client.on(\"connect\", () => {\n        setConnectStatus(\"Connected\");\n      });\n \n      client.on(\"error\", (err) => {\n        console.error(\"Connection error: \", err);\n        client.end(() => {\n          setConnectStatus(\"Connect\");\n        });\n      });\n \n      client.on(\"reconnect\", () => {\n        setConnectStatus(\"Reconnecting\");\n      });\n \n      client.subscribe(props.topic, { qos: 1 });\n \n      client.on(\"message\", (topic, message) => {\n        const data = { topic, message: message.toString() };\n\n        console.log(topic);\n        if(topic.split('/')[2] == \"temp\")\n          setTempPayload(data);\n        else if(topic.split('/')[2] == \"light\")\n          setLightPayload(data);\n        console.log('Recieved', topic, message.toString());\n      });\n    }\n  }, [client]);\n \n  const connectToBroker = () => {\n    console.log(\"connectToBroker\");\n    const mo = {\n      ...mqttOptions,\n      clientId: `mqttjs_ + ${Math.random().toString(16).substr(2, 8)}`,\n      will,\n    };\n    setClient(mqtt.connect(url, mo));\n  };\n \n  const disconnectToBroker = () => {\n    console.log(\"disconnectToBroker\");\n    if (client) {\n      client.end(() => {\n        setConnectStatus(\"Disconnected\");\n      });\n    };\n  };\n \n  return (\n    <Card className=\"equal-width\" title ={props.title}>\n        <div>Topic: {props.topic}</div>\n       \n          <div>Temp: {tempPayload?.message }</div>\n          <div>Light: {lightPayload?.message }</div>\n        \n        <div>Status: {connectStatus}</div>\n        {connectStatus === \"Connected\" ? (\n            <Button onClick={disconnectToBroker}>Disconnect</Button>\n        ) : (\n            <Button onClick={connectToBroker}>Connect</Button>\n        )}\n    </Card>\n  );\n};\n \nexport default Subscriber;\n","import React from \"react\";\n\nimport './App.css';\n \n// Component\n//import { Row } from \"antd\";\n \nimport { Card, Button, Row } from \"antd\";\n\nimport Publisher from './Publisher';\nimport Subscriber from './Subscriber';\n \nconst mqttOptions = {\n  keepalive: 30,\n  protocolId: \"MQTT\",\n  protocolVersion: 4,\n  clean: true,\n  reconnectPeriod: 1000,\n  connectTimeout: 30 * 1000,\n  rejectUnauthorized: false,\n};\n \nconst MQTTApp = () => {\n  const host = \"broker.mqttdashboard.com\"; // \"broker.emqx.io\";\n  const port = 8000; // 8083;\n  const url = `ws://${host}:${port}/mqtt`;\n \n  return (\n    <Card title=\"MQTT Using React\"  className=\"background-color\">\n        <Row className=\"flex-box\">\n            <div className=\"content-align-center first\">\n                <Publisher url={url} mqttOptions={mqttOptions}  retain={true} temperatureTopic=\"home/hall/temp\" lightTopic=\"home/hall/light\" title=\"Hall Publisher\" />\n                <Publisher url={url} mqttOptions={mqttOptions}  retain={true} temperatureTopic=\"home/kitchen/temp\" lightTopic=\"home/kitchen/light\" title=\"Kitchen Publisher\" />\n                {/* <HallPublisher url={url} mqttOptions={mqttOptions} /> */}\n            </div>\n         \n                <div className=\"content-align-center second\">\n                    <Subscriber url={url} mqttOptions={mqttOptions} title=\"Subscriber A\" topic=\"home/hall/#\"  />\n                    <Subscriber url={url} mqttOptions={mqttOptions} title=\"Subscribr B\" topic=\"home/kitchen/#\" />\n            </div>\n        </Row>\n    </Card>\n  );\n};\n \nexport default MQTTApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MQTTApp from './MQTTApp';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <MQTTApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}